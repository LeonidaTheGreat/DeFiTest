{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Stojan/Documents/GitHub/DeFi/learning-projects/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Stojan/Documents/GitHub/DeFi/learning-projects/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/Stojan/Documents/GitHub/DeFi/learning-projects/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/Stojan/Documents/GitHub/DeFi/learning-projects/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Stojan/Documents/GitHub/DeFi/learning-projects/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/Stojan/Documents/GitHub/DeFi/learning-projects/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/Stojan/Documents/GitHub/DeFi/learning-projects/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Stojan/Documents/GitHub/DeFi/learning-projects/defi-staking-app-starter/src/components/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './Navbar';\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json';\nimport RWD from '../truffle_abis/RWD.json';\nimport DecentralBank from '../truffle_abis/DecentralBank.json';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"UNSAFE_componentWillMount\",\n    // React code goes here\n    value: function () {\n      var _UNSAFE_componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function UNSAFE_componentWillMount() {\n        return _UNSAFE_componentWillMount.apply(this, arguments);\n      }\n\n      return UNSAFE_componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('No ethereum browser detected! You can check out MetaMask');\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, account, networkId, tetherData, tether, tetherBalance, rwdData, rwd, rwdBalance, decentralBankData, decentralBank, stakingBalance;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                account = _context3.sent;\n                this.setState({\n                  account: account[0]\n                });\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                // Load Tether contract\n                tetherData = Tether.networks[networkId];\n\n                if (!tetherData) {\n                  _context3.next = 19;\n                  break;\n                }\n\n                tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n                this.setState({\n                  tether: tether\n                });\n                _context3.next = 14;\n                return tether.methods.balanceOf(this.state.account).call();\n\n              case 14:\n                tetherBalance = _context3.sent;\n                this.setState({\n                  tetherBalance: tetherBalance.toString()\n                });\n                console.log({\n                  tetherBalance: tetherBalance\n                });\n                _context3.next = 20;\n                break;\n\n              case 19:\n                window.alert('Error: Tether contract not deployed');\n\n              case 20:\n                // Load Reward (RWD) contract\n                rwdData = RWD.networks[networkId];\n\n                if (!rwdData) {\n                  _context3.next = 31;\n                  break;\n                }\n\n                rwd = new web3.eth.Contract(RWD.abi, rwdData.address);\n                this.setState({\n                  rwd: rwd\n                });\n                _context3.next = 26;\n                return rwd.methods.balanceOf(this.state.account).call();\n\n              case 26:\n                rwdBalance = _context3.sent;\n                this.setState({\n                  rwdBalance: rwdBalance.toString()\n                });\n                console.log({\n                  rwdBalance: rwdBalance\n                });\n                _context3.next = 32;\n                break;\n\n              case 31:\n                window.alert('Error: RWD contract not deployed');\n\n              case 32:\n                // Load DecentralBank contract\n                decentralBankData = DecentralBank.networks[networkId];\n\n                if (!decentralBankData) {\n                  _context3.next = 43;\n                  break;\n                }\n\n                decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address);\n                this.setState({\n                  decentralBank: decentralBank\n                });\n                _context3.next = 38;\n                return decentralBank.methods.stakingBalance(this.state.account).call();\n\n              case 38:\n                stakingBalance = _context3.sent;\n                this.setState({\n                  stakingBalance: stakingBalance.toString()\n                });\n                console.log({\n                  stakingBalance: stakingBalance\n                });\n                _context3.next = 44;\n                break;\n\n              case 43:\n                window.alert('Error: DecentralBank contract not deployed');\n\n              case 44:\n                this.setState({\n                  loading: false\n                });\n\n              case 45:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: '0x...',\n      tether: {},\n      rwd: {},\n      decentralBank: {},\n      tetherBalance: '0',\n      rwdBalance: '0',\n      stakingBalance: '0',\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }\n      }, \"'Hello World!!!'\", /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }\n      }, \"this.state.loading\")));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/Stojan/Documents/GitHub/DeFi/learning-projects/defi-staking-app-starter/src/components/App.js"],"names":["React","Component","Navbar","Web3","Tether","RWD","DecentralBank","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","account","setState","net","getId","networkId","tetherData","networks","tether","Contract","abi","address","methods","balanceOf","state","call","tetherBalance","toString","console","log","rwdData","rwd","rwdBalance","decentralBankData","decentralBank","stakingBalance","loading","props"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport './App.css'\nimport Navbar from './Navbar'\nimport Web3 from 'web3'\nimport Tether from '../truffle_abis/Tether.json'\nimport RWD from '../truffle_abis/RWD.json'\nimport DecentralBank from '../truffle_abis/DecentralBank.json'\n\nclass App extends Component {\n    // React code goes here\n    async UNSAFE_componentWillMount() {\n        await this.loadWeb3()\n        await this.loadBlockchainData()\n    }\n\n    async loadWeb3() {\n        if (window.ethereum) {\n            window.web3 = new Web3(window.ethereum)\n            await window.ethereum.enable()\n        } else if (window.web3) {\n            window.web3 = new Web3(window.web3.currentProvider)\n        } else {\n            window.alert('No ethereum browser detected! You can check out MetaMask')\n        }\n    }\n\n    async loadBlockchainData() {\n        const web3 = window.web3\n        const account = await web3.eth.getAccounts()\n        this.setState({account:account[0]})\n        \n        const networkId = await web3.eth.net.getId()\n        \n        // Load Tether contract\n        const tetherData = Tether.networks[networkId]\n        if(tetherData) {\n            const tether = new web3.eth.Contract(Tether.abi, tetherData.address)\n            this.setState({tether})\n            let tetherBalance = await tether.methods.balanceOf(this.state.account).call()\n            this.setState({tetherBalance: tetherBalance.toString()})\n            console.log({tetherBalance: tetherBalance})\n        } else {\n            window.alert('Error: Tether contract not deployed')\n        }\n\n        // Load Reward (RWD) contract\n        const rwdData = RWD.networks[networkId]\n        if (rwdData) {\n            const rwd = new web3.eth.Contract(RWD.abi, rwdData.address)\n            this.setState({rwd})\n            let rwdBalance = await rwd.methods.balanceOf(this.state.account).call()\n            this.setState({rwdBalance: rwdBalance.toString()})\n            console.log({rwdBalance: rwdBalance})\n        } else {\n            window.alert('Error: RWD contract not deployed')\n        }\n\n        // Load DecentralBank contract\n        const decentralBankData = DecentralBank.networks[networkId]\n        if (decentralBankData) {\n            const decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address)\n            this.setState({decentralBank})\n            let stakingBalance = await decentralBank.methods.stakingBalance(this.state.account).call()\n            this.setState({stakingBalance: stakingBalance.toString()})\n            console.log({stakingBalance: stakingBalance})\n        } else {\n            window.alert('Error: DecentralBank contract not deployed')\n        }\n\n        this.setState({loading: false})\n    }\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            account: '0x...',\n            tether: {},\n            rwd: {},\n            decentralBank: {},\n            tetherBalance: '0',\n            rwdBalance: '0',\n            stakingBalance: '0',\n            loading: true\n\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Navbar account={this.state.account}/>\n                <div className='text-center'>\n                    'Hello World!!!'\n                    <h1>this.state.loading</h1>\n                </div>   \n            </div>\n        )\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}